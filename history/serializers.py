import sys
from collections import OrderedDict
from typing import Type, Any

from rest_framework import serializers

from history.enums import ExcludedField, HistoryModel
from history.models import (
    get_historical_model,
)
from payment_card.models import PaymentCardAccount
from scheme.models import SchemeAccount
from user.models import CustomUser


# ----- serializers used to validate and save historical models autogenerated from HistoryModels ----- #

def historical_serializer_factory(history_model: HistoryModel) -> Any:
    try:
        model = get_historical_model(history_model.model_name)
    except AttributeError:
        raise Exception(
            "Model %s was added to HistoryModel but no Model was found for it in history.models" % history_model.name
        )

    return type(
        history_model.historic_serializer_name,
        (serializers.ModelSerializer,),
        {
            "Meta": type(
                "Meta",
                (object,),
                {"model": model, "fields": "__all__"}
            )
        }
    )


HISTORICAL_SERIALIZERS = {
    history_model.historic_serializer_name: historical_serializer_factory(history_model)
    for history_model in HistoryModel
}


# ----- serializers used to serialize cards' body field. ----- #


class ReadOnlyModelSerializer(serializers.ModelSerializer):
    def get_fields(self):
        fields = super().get_fields()
        filtered_fields = OrderedDict()
        for k, v in fields.items():
            if not isinstance(v, serializers.ManyRelatedField):
                filtered_fields[k] = v
                filtered_fields[k].read_only = True

        del fields
        return filtered_fields


class CustomUserSerializer(ReadOnlyModelSerializer):
    class Meta:
        model = CustomUser
        exclude = ExcludedField.as_list(CustomUser)


class PaymentCardAccountSerializer(ReadOnlyModelSerializer):
    class Meta:
        model = PaymentCardAccount
        exclude = ExcludedField.as_list(PaymentCardAccount)


class SchemeAccountSerializer(ReadOnlyModelSerializer):
    class Meta:
        model = SchemeAccount
        exclude = ExcludedField.as_list(SchemeAccount)


def _get_serializer(name: str) -> Type["serializers.Serializer"]:
    return getattr(sys.modules[__name__], name)


def get_historical_serializer(name: str) -> Type["serializers.Serializer"]:
    return HISTORICAL_SERIALIZERS[f"Historical{name}Serializer"]


def get_body_serializer(name: str) -> Type["serializers.Serializer"]:
    return _get_serializer(f"{name}Serializer")
