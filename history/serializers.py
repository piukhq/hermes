from collections import OrderedDict
from typing import Any, Type

from django.apps import apps
from rest_framework import serializers

from history.enums import ExcludedField, HistoryModel
from history.models import get_historical_model

# ----- serializers used to validate and save historical models autogenerated from HistoryModels ----- #


def historical_serializer_factory(history_model: HistoryModel) -> Any:
    try:
        model = get_historical_model(history_model.model_name)
    except AttributeError:
        raise Exception(
            "Model %s was added to HistoryModel but no Model was found for it in history.models" % history_model.name
        )

    return type(
        history_model.historic_serializer_name,
        (serializers.ModelSerializer,),
        {"Meta": type("Meta", (object,), {"model": model, "fields": "__all__"})},
    )


HISTORICAL_SERIALIZERS = {
    history_model.historic_serializer_name: historical_serializer_factory(history_model)
    for history_model in HistoryModel
}


# ----- serializers used to serialize cards' body field. ----- #


class ReadOnlyModelSerializer(serializers.ModelSerializer):
    def get_fields(self):
        fields = super().get_fields()
        filtered_fields = OrderedDict()
        for k, v in fields.items():
            if not isinstance(v, serializers.ManyRelatedField):
                filtered_fields[k] = v
                filtered_fields[k].read_only = True

        del fields
        return filtered_fields


# using factories and load on app ready to prevent circular imports from scheme, payment_card, etc
def body_serializer_factory(serializer_name: str, app_name: str, model_name: str) -> Any:
    model = apps.get_model(app_name, model_name)

    return type(
        serializer_name,
        (ReadOnlyModelSerializer,),
        {"Meta": type("Meta", (object,), {"model": model, "exclude": ExcludedField.as_list(model)})},
    )


BODY_SERIALIZERS = {}


def load_body_serializers():
    global BODY_SERIALIZERS
    BODY_SERIALIZERS = {
        f"{model_name}Serializer": body_serializer_factory(f"{model_name}Serializer", app_name, model_name)
        for app_name, model_name in HistoryModel.require_body_serializers()
    }


def get_historical_serializer(name: str) -> Type["serializers.Serializer"]:
    return HISTORICAL_SERIALIZERS[f"Historical{name}Serializer"]


def get_body_serializer(name: str) -> Type["serializers.Serializer"]:
    if not BODY_SERIALIZERS:
        load_body_serializers()

    return BODY_SERIALIZERS[f"{name}Serializer"]
