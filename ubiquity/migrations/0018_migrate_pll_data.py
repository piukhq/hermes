# Generated by Django 4.0.7 on 2022-11-29 14:27

import logging
from time import sleep
from uuid import uuid4

from celery import shared_task
from django.conf import settings
from django.db import migrations
from django.db.utils import OperationalError
from redis.client import Redis

from ubiquity.models import PaymentCardSchemeEntry, PllUserAssociation, SchemeAccountEntry

TASK_SIZE = 500
MIGRATION_TASK_PREFIX = "hermes-migration-pll-data-"
r_write = Redis(connection_pool=settings.REDIS_WRITE_API_CACHE_POOL)
r_read = Redis(connection_pool=settings.REDIS_READ_API_CACHE_POOL)


def retry_redis(action, key):
    for x in range(5):
        try:
            redis_key = MIGRATION_TASK_PREFIX + key
            if action == "set":
                r_write.set(redis_key, "True")
            elif action == "delete":
                r_write.delete(redis_key)
            else:
                raise ValueError(f"retry redis func only accepts set or delete, received {action}")
            break
        except Exception as e:
            if x == 4:
                logging.warning(f"redis delete failed 5 times in a row, no more retries, error: {repr(e)}")
                raise
            logging.warning(f"redis delete broke with exception {repr(e)}, retrying...")
            sleep(0.2)


def retry_celery(task_id, pks_to_process, link_mapping):
    for x in range(5):
        try:
            populate_pll_task.delay(task_id, pks_to_process, link_mapping)
            break
        except Exception as e:
            if x == 4:
                logging.warning(f"celery delay failed 5 times in a row, no more retries, error: {repr(e)}")
                raise
            logging.warning(f"celery delay broke with exception {repr(e)}, retrying...")
            sleep(0.2)


def do_nothing(*_):
    pass


def gather_data(pks_to_process):
    for attempt in range(3):
        try:
            all_sae = list(SchemeAccountEntry.objects.filter(scheme_account__id__in=pks_to_process))
            break
        except OperationalError:
            logging.warning(f"Database connection failed!, retrying {2 - attempt} more times...")
            if attempt == 2:
                raise
            sleep(0.2)

    scheme_account_index = {}
    for sae in all_sae:
        item = {
            "user": sae.user_id,
        }
        if scheme_account_index.get(sae.scheme_account_id):
            scheme_account_index[sae.scheme_account_id].append(item)
        else:
            scheme_account_index[sae.scheme_account_id] = [item]

    for attempt in range(3):
        try:
            base_links = list(
                PaymentCardSchemeEntry.objects.filter(
                    scheme_account__id__in=pks_to_process, scheme_account__is_deleted=False
                )
            )
            break
        except OperationalError:
            logging.warning(f"Database connection failed!, retrying {2 - attempt} more times...")
            if attempt == 2:
                raise
            sleep(0.2)

    return base_links, scheme_account_index


@shared_task
def populate_pll_task(task_id, pks_to_process, link_mapping):
    try:
        base_links, scheme_account_index = gather_data(pks_to_process)
        bulk_pll = []
        for base_link in base_links:
            scheme_account_id = base_link.scheme_account_id
            pll_link_data = link_mapping[base_link.id]
            if scheme_account_index.get(scheme_account_id):
                for plluser in scheme_account_index[scheme_account_id]:
                    bulk_pll.append(
                        PllUserAssociation(
                            pll_id=base_link.id,
                            user_id=plluser["user"],
                            slug=pll_link_data["slug"],
                            state=pll_link_data["state"],
                        )
                    )
            else:
                print(f"Not found scheme account id {scheme_account_id}")

        for attempt in range(3):
            try:
                PllUserAssociation.objects.bulk_create(bulk_pll)
                break
            except OperationalError:
                logging.warning(f"Database connection failed!, retrying {2 - attempt} more times...")
                if attempt == 2:
                    raise
                sleep(0.2)

        retry_redis("delete", task_id)

    except Exception as e:
        logging.warning(
            f"Migration task failed! Migration: '{__file__}', error: {repr(e)}, "
            f"Migration will stay locked until this is manually pushed through. To do this, run 'populate_pll_task'"
            f"with these arguments: task_id = '{task_id}', pks_to_process = '{pks_to_process}', link_mapping = '{link_mapping}'"
        )
        raise


def wait_for_tasks_to_finish():
    tasks_to_process = True
    while tasks_to_process:
        try:
            tasks_to_process = len(list(r_read.scan_iter(f"{MIGRATION_TASK_PREFIX}*")))
            logging.warning(f"Waiting for async migration to complete, {tasks_to_process} tasks remaining")
            if tasks_to_process:
                sleep(2)
        except Exception as e:
            logging.warning(
                f"Unexpected error happened while checking remaining tasks! I'll keep checking until"
                f"this gets resolved! Error: {repr(e)}"
            )


def populate_pll(apps, *_):
    # get the models from the app argument passed through the migration
    PaymentCardSchemeEntry = apps.get_model("ubiquity", "PaymentCardSchemeEntry")
    SchemeAccount = apps.get_model("scheme", "SchemeAccount")

    task_count = 0
    sql_offset = 0
    sql_limit = TASK_SIZE
    pks_to_process = True
    while pks_to_process:
        task_id = str(uuid4())
        for attempt in range(3):
            try:
                pks_to_process = list(
                    SchemeAccount.objects.all().order_by("id")[sql_offset:sql_limit].values_list("id", flat=True)
                )
                pll_links = list(
                    PaymentCardSchemeEntry.objects.filter(
                        scheme_account__id__in=pks_to_process, scheme_account__is_deleted=False
                    )
                )
                break
            except OperationalError:
                logging.warning(f"Database connection failed!, retrying {2 - attempt} more times...")
                if attempt == 2:
                    raise
                sleep(0.2)

        link_mapping = {}
        for pll_link in pll_links:
            link_mapping[pll_link.id] = {"state": pll_link.state, "slug": pll_link.slug}

        if pks_to_process:
            task_count += 1
            sql_offset += TASK_SIZE
            sql_limit += TASK_SIZE
            retry_redis("set", task_id)
            retry_celery(task_id, pks_to_process, link_mapping)

    if task_count:
        logging.warning(f"Finished creating {task_count} async tasks, waiting till completion...")
        wait_for_tasks_to_finish()


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("ubiquity", "0017_plluserassociation"),
    ]

    operations = [
        migrations.RunPython(populate_pll, reverse_code=do_nothing),
    ]
