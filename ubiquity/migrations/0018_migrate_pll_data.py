# Generated by Django 4.0.7 on 2022-11-29 14:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def do_nothing(*_):
    pass


def populate_pll(apps, *_):
    # get the models from the app argument passed through the migration
    PllUserAssociation = apps.get_model("ubiquity", "PllUserAssociation")
    SchemeAccountEntry = apps.get_model("ubiquity", "SchemeAccountEntry")
    SchemeAccount = apps.get_model("scheme", "SchemeAccount")
    first_id = SchemeAccount.objects.earliest('id').id
    last_id = SchemeAccount.objects.latest('id').id
    print(f"getting scheme accounts between {first_id} and {last_id}")
    increment = 150000

    for start_id in range(first_id, last_id, increment):
        end_id = start_id + increment - 1
        all_sae = SchemeAccountEntry.objects.filter(scheme_account__id__range=(start_id, end_id))

        scheme_account_index = {}
        for sae in all_sae:
            item = {
                "user": sae.user.id,
            }
            if scheme_account_index.get(sae.scheme_account.id):
                scheme_account_index[sae.scheme_account.id].append(item)
            else:
                scheme_account_index[sae.scheme_account.id] = [item]

        print(f"Found {len(scheme_account_index)} {start_id} to {end_id} scheme accounts to migrate")

        bulk_pll = []

        PaymentCardSchemeEntry = apps.get_model("ubiquity", "PaymentCardSchemeEntry")
        base_links = PaymentCardSchemeEntry.objects.filter(scheme_account__id__range=(start_id, end_id))
        for base_link in base_links:
            scheme_account_id = base_link.scheme_account.id
            if scheme_account_index.get(scheme_account_id):
                for plluser in scheme_account_index[scheme_account_id]:
                    bulk_pll.append(
                        PllUserAssociation(
                            pll_id=base_link.id, user_id=plluser["user"], slug=base_link.slug, state=base_link.state
                        )
                    )

        print(f"Found {len(bulk_pll )} pll associations to add")

        PllUserAssociation.objects.bulk_create(bulk_pll, batch_size=10000)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("ubiquity", "0017_plluserassociation"),
    ]

    operations = [
        migrations.RunPython(populate_pll, reverse_code=do_nothing),
    ]
