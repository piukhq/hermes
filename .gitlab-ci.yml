stages:
  - test
  - build
  - deploy

default:
  image: ghcr.io/binkhq/python:3.9

test:style: &test
  stage: test
  before_script:
    - pipenv install --dev --system --deploy --ignore-pipfile
    - pip freeze
  script:
    - flake8

test:complexity:
  <<: *test
  script:
    - xenon --no-assert --max-average A --max-modules B --max-absolute B .

test:pytest:
  <<: *test
  script:
    - export HERMES_DATABASE_URL="postgres://postgres@${POSTGRES_PORT_5432_TCP_ADDR}:5432${POSTGRES_NAME}"
    - coverage run --source='.' manage.py test -v 2
    - coverage report
    - coverage xml
  services:
    - postgres:latest
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml

build:develop: &build
  stage: build
  needs: ["test:pytest", "test:complexity", "test:style"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - export CTAG=$(echo -n "$CI_PIPELINE_CREATED_AT" | sed s/\://g)
  script:
    - docker build --pull --tag "$CI_REGISTRY/$CI_PROJECT_NAME:$CTAG" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAME:$CTAG"
  only:
    - develop

build:tag:
  <<: *build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - export CTAG=$CI_COMMIT_TAG
  only:
    - tags

build:performance:
  <<: *build
  only:
    - performance

deploy:dev: &deploy
  stage: deploy
  needs: ["build:develop"]
  image: binkcore.azurecr.io/tagbot:latest
  environment:
    name: dev
  before_script:
    - export CTAG=$(echo -n "$CI_PIPELINE_CREATED_AT" | sed s/\://g)
  script:
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CTAG"
      --tag "$CI_ENVIRONMENT_NAME-$CTAG"
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CTAG"
      --tag "$CI_ENVIRONMENT_NAME"
  only:
    - develop


deploy:performance:
  <<: *deploy
  needs: ["build:performance"]
  environment:
    name: performance
  only:
    - performance

deploy:staging:
  <<: *deploy
  needs: ["build:tag"]
  environment:
    name: staging
  before_script:
    - export CTAG=$CI_COMMIT_TAG
  only:
    - tags

deploy:prod:
  <<: *deploy
  needs: ["build:tag"]
  environment:
    name: prod
  before_script:
    - export CTAG=$CI_COMMIT_TAG
  when: manual
  only:
    - tags
