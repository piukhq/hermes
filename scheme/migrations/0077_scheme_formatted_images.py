# Generated by Django 2.2.11 on 2020-06-17 10:16

import django.contrib.postgres.fields.jsonb
from django.db import migrations

from common.models import Image


def _format_image_for_ubiquity(image):
    if image['encoding']:
        encoding = image['encoding']
    else:
        try:
            encoding = image['image'].split('.')[-1].replace('/', '')
        except (IndexError, AttributeError):
            encoding = None

    return {
        'type': image['image_type_code'],
        'url': image['image'],
        'description': image['description'],
        'encoding': encoding
    }


def format_images(apps, schema_editor):
    Scheme = apps.get_model('scheme', 'Scheme')
    for scheme in Scheme.objects.all():
        formatted_images = {}
        tier_images = {}
        for img in scheme.images.values('image_type_code', 'image', 'description', 'encoding', 'reward_tier'):
            if img['image_type_code'] in [Image.HERO, Image.ICON, Image.ALT_HERO]:
                formatted_images[img['image_type_code']] = _format_image_for_ubiquity(img)
            elif img['image_type_code'] == Image.TIER:
                tier_images[img['reward_tier']] = _format_image_for_ubiquity(img)

        formatted_images[Image.TIER] = tier_images
        scheme.formatted_images = formatted_images
        scheme.save(update_fields=['formatted_images'])


def revert_format_images(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('scheme', '0076_format_stored_balance'),
    ]

    operations = [
        migrations.AddField(
            model_name='scheme',
            name='formatted_images',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.RunPython(format_images, revert_format_images),
    ]
