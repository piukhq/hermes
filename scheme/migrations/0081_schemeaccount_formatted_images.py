# Generated by Django 2.2.11 on 2020-07-14 09:45

import django.contrib.postgres.fields.jsonb
from django.db import migrations

from common.models import Image


def _format_image_for_ubiquity(img):
    try:
        encoding = img.encoding or img.image.name.split('.')[-1].replace('/', '')
    except (IndexError, AttributeError):
        encoding = None

    return {
        'payload': {
            'id': img.id,
            'type': img.image_type_code,
            'url': img.image.url,
            'description': img.description,
            'encoding': encoding,

        },
        'validity': {
            'start_date': img.start_date.timestamp() if img.start_date else None,
            'end_date': img.end_date.timestamp() if img.end_date else None
        }
    }


def format_base_images(apps, schema_editor):
    Scheme = apps.get_model('scheme', 'Scheme')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO, Image.TIER]
    }

    schemes = []
    for scheme in Scheme.objects.all():
        formatted_images = {}
        tier_images = {}
        for img in scheme.images.filter(**query).all():
            formatted_img = _format_image_for_ubiquity(img)
            if img.image_type_code == Image.TIER:
                if img.reward_tier not in tier_images:
                    tier_images[img.reward_tier] = {}

                tier_images[img.reward_tier][img.id] = formatted_img
            else:
                if img.image_type_code not in formatted_images:
                    formatted_images[img.image_type_code] = {}

                formatted_images[img.image_type_code][img.id] = formatted_img

        scheme.formatted_images = {'images': formatted_images, 'tier_images': tier_images}
        schemes.append(scheme)

    Scheme.objects.bulk_update(schemes, ['formatted_images'])


def format_account_images(apps, schema_editor):
    SchemeAccount = apps.get_model('scheme', 'SchemeAccount')
    SchemeAccountImage = apps.get_model('scheme', 'SchemeAccountImage')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO]
    }

    accounts = {}
    for img in SchemeAccountImage.objects.filter(**query).all():
        formatted_image = _format_image_for_ubiquity(img)
        for account in img.scheme_accounts.all():
            if account.id not in accounts:
                accounts[account.id] = account

            scheme_account = accounts[account.id]
            if img.image_type_code == Image.TIER:
                account_tier_images = scheme_account.formatted_images.get('tier_images', {})
                if img.reward_tier not in account_tier_images:
                    account_tier_images[img.reward_tier] = {}

                account_tier_images[img.reward_tier][img.id] = formatted_image
                scheme_account.formatted_images.update({'tier_images': account_tier_images})
            else:
                account_images = scheme_account.formatted_images.get('images', {})
                if img.image_type_code not in account_images:
                    account_images[img.image_type_code] = {}

                account_images[img.image_type_code][img.id] = formatted_image
                scheme_account.formatted_images.update({'images': account_images})

    SchemeAccount.all_objects.bulk_update(list(accounts.values()), ['formatted_images'], batch_size=1000)


def revert_format_images(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('scheme', '0080_auto_20200716_1535'),
    ]

    operations = [
        migrations.AddField(
            model_name='schemeaccount',
            name='formatted_images',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.RunPython(format_base_images, revert_format_images),
        migrations.RunPython(format_account_images, revert_format_images),
    ]
