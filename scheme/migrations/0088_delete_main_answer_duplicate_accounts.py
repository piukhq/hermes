# Generated by Django 2.2.14 on 2020-11-09 11:16

from django.db import IntegrityError, migrations


def merge_duplicate_email_main_answer_accounts(apps, schema_editor):
    SchemeAccountCredentialAnswer = apps.get_model("scheme", "SchemeAccountCredentialAnswer")
    SchemeCredentialQuestion = apps.get_model("scheme", "SchemeCredentialQuestion")

    man_questions = SchemeCredentialQuestion.objects.filter(manual_question=True, type="email")

    for question in man_questions:
        all_answers = SchemeAccountCredentialAnswer.objects.filter(
            question=question,
            scheme_account__is_deleted=False,
        ).select_related("scheme_account")

        duplicates = _find_duplicates(all_answers)

        for email, accounts in duplicates.items():
            latest_mcard = [acc for acc in accounts if acc.id == max([acc.id for acc in accounts])][0]
            existing_mcard_entries = latest_mcard.schemeaccountentry_set.all()
            existing_pcard_entries = latest_mcard.paymentcardschemeentry_set.all()
            users_already_linked = {entry.user_id for entry in existing_mcard_entries}
            pcards_already_linked = {entry.payment_card_account_id for entry in existing_pcard_entries}
            accounts.remove(latest_mcard)

            print(f"Merging all duplicates to SchemeAccount (id={latest_mcard})")
            _merge_duplicate_accounts(latest_mcard, accounts, users_already_linked, pcards_already_linked)
            print(f"Completed merge to SchemeAccount (id={latest_mcard}) - {len(accounts)} merged")


def _merge_duplicate_accounts(latest_mcard, accounts, users_already_linked, pcards_already_linked):
    for account in accounts:
        scheme_account_entries = account.schemeaccountentry_set.all()
        payment_card_scheme_entries = account.paymentcardschemeentry_set.all()
        user_links_to_add = [entry for entry in scheme_account_entries if entry.user_id not in users_already_linked]
        pcard_links_to_add = [
            entry for entry in payment_card_scheme_entries if entry.payment_card_account_id not in pcards_already_linked
        ]

        _add_links(latest_mcard, user_links_to_add, pcard_links_to_add)

        scheme_account_entries.delete()
        payment_card_scheme_entries.delete()
        account.is_deleted = True
        account.save(update_fields=["is_deleted"])


def _find_duplicates(all_answers):
    parsed_answers = {}
    duplicates = {}
    for answer in all_answers:
        iexact_answer = answer.answer.lower()
        if iexact_answer in parsed_answers:
            parsed_answers[iexact_answer].append(answer.scheme_account)
            duplicates[iexact_answer] = parsed_answers[iexact_answer]
        else:
            parsed_answers[iexact_answer] = [answer.scheme_account]

    return duplicates


def _add_links(account, sch_entries, pay_entries):
    for entry in sch_entries:
        try:
            entry.scheme_account = account
            entry.save(update_fields=["scheme_account"])
            print(f"Added {entry}")
        except IntegrityError:
            pass

    for entry in pay_entries:
        try:
            entry.scheme_account = account
            entry.save(update_fields=["scheme_account"])
            if account.status == 1:
                account.pll_links = [
                    {"id": pcard_id, "active_link": True}
                    for pcard_id in account.payment_card_account_set.filter(is_deleted=False).values_list(
                        "id", flat=True
                    )
                ]
                account.save(update_fields=["pll_links"])

            pcard = entry.payment_card_account
            if pcard.status == 1:
                pcard.pll_links = [
                    {"id": mcard_id, "active_link": True}
                    for mcard_id in pcard.scheme_account_set.filter(is_deleted=False).values_list("id", flat=True)
                ]
                pcard.save(update_fields=["pll_links"])

            print(f"Added {entry}")
        except IntegrityError:
            pass


def revert(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("scheme", "0087_lowercase_email_main_answers"),
    ]

    operations = [migrations.RunPython(merge_duplicate_email_main_answer_accounts, reverse_code=revert)]
