# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2018-08-10 10:27
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import scheme.models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("scheme", "0041_auto_20180504_1519"),
    ]

    operations = [
        migrations.CreateModel(
            name="Consent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("check_box", models.BooleanField()),
                ("text", models.TextField()),
                ("is_enabled", models.BooleanField(default=True)),
                ("required", models.BooleanField()),
                ("order", models.IntegerField()),
                ("journey", models.IntegerField(choices=[(0, "join"), (1, "link"), (2, "add")])),
                (
                    "slug",
                    models.SlugField(
                        help_text="Slug must match the opt-in field name in the request sent to the merchant e.g marketing_opt_in"
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SchemeCredentialQuestionChoice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "scheme_question",
                    models.CharField(
                        choices=[
                            ("username", "user name"),
                            ("email", "email"),
                            ("card_number", "card number"),
                            ("barcode", "barcode"),
                            ("password", "password"),
                            ("place_of_birth", "place of birth"),
                            ("postcode", "postcode"),
                            ("memorable_date", "memorable date"),
                            ("pin", "pin"),
                            ("title", "title"),
                            ("first_name", "first name"),
                            ("last_name", "last name"),
                            ("favourite_place", "favourite place"),
                            ("date_of_birth", "date_of_birth"),
                            ("phone", "phone number"),
                            ("phone_2", "phone number 2"),
                            ("gender", "gender"),
                            ("address_1", "address 1"),
                            ("address_2", "address 2"),
                            ("address_3", "address 3"),
                            ("town_city", "town city"),
                            ("county", "county"),
                            ("country", "country"),
                            ("regular_restaurant", "regular restaurant"),
                            ("merchant_identifier", "merchant identifier"),
                        ],
                        max_length=250,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SchemeCredentialQuestionChoiceValue",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.CharField(max_length=250)),
                (
                    "choice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choice_values",
                        to="scheme.SchemeCredentialQuestionChoice",
                    ),
                ),
            ],
            options={
                "ordering": ["value"],
            },
        ),
        migrations.CreateModel(
            name="UserConsent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_on", models.DateTimeField(default=django.utils.timezone.now)),
                ("metadata", django.contrib.postgres.fields.jsonb.JSONField()),
                ("slug", models.SlugField()),
                ("value", models.BooleanField()),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "PENDING"), (1, "SUCCESS"), (2, "FAILED")], default=scheme.models.ConsentStatus(0)
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="scheme",
            name="transaction_headers",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=40),
                default=scheme.models._default_transaction_headers,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="schemeaccount",
            name="status",
            field=models.IntegerField(
                choices=[
                    (0, "Pending"),
                    (1, "Active"),
                    (403, "Invalid credentials"),
                    (432, "Invalid mfa"),
                    (530, "End site down"),
                    (531, "IP blocked"),
                    (532, "Tripped captcha"),
                    (5, "Please check your scheme account login details."),
                    (434, "Account locked on end site"),
                    (429, "Cannot connect, too many retries"),
                    (503, "Too many balance requests running"),
                    (520, "An unknown error has occurred"),
                    (9, "Midas unavailable"),
                    (10, "Wallet only card"),
                    (404, "Agent does not exist on midas"),
                    (533, "Password expired"),
                    (900, "Join"),
                    (444, "No user currently found"),
                    (536, "Error with the configuration or it was not possible to retrieve"),
                    (535, "Request was not sent"),
                ],
                default=0,
            ),
        ),
        migrations.AlterField(
            model_name="schemecredentialquestion",
            name="options",
            field=models.IntegerField(
                choices=[
                    (0, "None"),
                    (1, "Link"),
                    (2, "Join"),
                    (6, "Join (optional)"),
                    (3, "Link & Join"),
                    (8, "Merchant Identifier"),
                ],
                default=0,
            ),
        ),
        migrations.AlterField(
            model_name="schemecredentialquestion",
            name="type",
            field=models.CharField(
                choices=[
                    ("username", "user name"),
                    ("email", "email"),
                    ("card_number", "card number"),
                    ("barcode", "barcode"),
                    ("password", "password"),
                    ("place_of_birth", "place of birth"),
                    ("postcode", "postcode"),
                    ("memorable_date", "memorable date"),
                    ("pin", "pin"),
                    ("title", "title"),
                    ("first_name", "first name"),
                    ("last_name", "last name"),
                    ("favourite_place", "favourite place"),
                    ("date_of_birth", "date_of_birth"),
                    ("phone", "phone number"),
                    ("phone_2", "phone number 2"),
                    ("gender", "gender"),
                    ("address_1", "address 1"),
                    ("address_2", "address 2"),
                    ("address_3", "address 3"),
                    ("town_city", "town city"),
                    ("county", "county"),
                    ("country", "country"),
                    ("regular_restaurant", "regular restaurant"),
                    ("merchant_identifier", "merchant identifier"),
                ],
                max_length=250,
            ),
        ),
        migrations.AddField(
            model_name="userconsent",
            name="scheme",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="scheme.Scheme"),
        ),
        migrations.AddField(
            model_name="userconsent",
            name="scheme_account",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="scheme.SchemeAccount"),
        ),
        migrations.AddField(
            model_name="userconsent",
            name="user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="schemecredentialquestionchoice",
            name="scheme",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="scheme.Scheme"),
        ),
        migrations.AddField(
            model_name="consent",
            name="scheme",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="consents", to="scheme.Scheme"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="schemecredentialquestionchoice",
            unique_together=set([("scheme", "scheme_question")]),
        ),
        migrations.AlterUniqueTogether(
            name="consent",
            unique_together=set([("slug", "scheme", "journey")]),
        ),
    ]
