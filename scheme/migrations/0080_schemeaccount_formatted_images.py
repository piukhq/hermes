# Generated by Django 2.2.11 on 2020-07-14 09:45

import django.contrib.postgres.fields.jsonb
from django.db import migrations

from common.models import Image


def _format_image_for_ubiquity(img):
    if img.encoding:
        encoding = img.encoding
    else:
        try:
            encoding = img.image.name.split('.')[-1].replace('/', '')
        except (IndexError, AttributeError):
            encoding = None

    return {
        'payload': {
            'id': img.id,
            'type': img.image_type_code,
            'url': img.image.url,
            'description': img.description,
            'encoding': encoding,

        },
        'validity': {
            'start_date': img.start_date.timestamp() if img.start_date else None,
            'end_date': img.end_date.timestamp() if img.end_date else None
        }
    }


def format_base_images(apps, schema_editor):
    Scheme = apps.get_model('scheme', 'Scheme')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO, Image.TIER]
    }

    for scheme in Scheme.objects.all():
        formatted_images = {}
        tier_images = {}
        for img in scheme.images.filter(**query).all():
            formatted_image = _format_image_for_ubiquity(img)
            if img.image_type_code == Image.TIER:
                tier_images[img.reward_tier] = formatted_image
            else:
                formatted_images[img.image_type_code] = formatted_image

        formatted_images[Image.TIER] = tier_images
        scheme.formatted_images = formatted_images
        scheme.save(update_fields=['formatted_images'])


def format_account_images(apps, schema_editor):
    SchemeAccount = apps.get_model('scheme', 'SchemeAccount')
    SchemeAccountImage = apps.get_model('scheme', 'SchemeAccountImage')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO]
    }

    accounts = {}
    for img in SchemeAccountImage.objects.filter(**query).all():
        if img.image_type_code == Image.TIER:
            formatted_image = {img.reward_tier: _format_image_for_ubiquity(img)}
        else:
            formatted_image = {img.image_type_code: _format_image_for_ubiquity(img)}

        for account in img.scheme_accounts.all():
            if account.id in accounts:
                update_account = accounts[account.id]
                if img.image_type_code == Image.TIER:
                    tier_images = update_account.formatted_images.get(Image.TIER, {})
                    tier_images.update(formatted_image)
                    update_account.update(tier_images)
                else:
                    update_account.formatted_images.update(formatted_image)
            else:
                if img.image_type_code == Image.TIER:
                    formatted_image = {img.image_type_code: formatted_image}

                account.formatted_images.update(formatted_image)
                accounts.update({account.id: account})

    SchemeAccount.all_objects.bulk_update(list(accounts.values()), ['formatted_images'], batch_size=1000)


def revert_format_images(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('scheme', '0079_schemeaccount_pll_links'),
    ]

    operations = [
        migrations.AddField(
            model_name='schemeaccount',
            name='formatted_images',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.RunPython(format_base_images, revert_format_images),
        migrations.RunPython(format_account_images, revert_format_images),
    ]
