# Generated by Django 2.2.11 on 2020-05-19 14:59
import re
import sre_constants

from django.db import migrations

from scheme.credentials import CARD_NUMBER, BARCODE


def _update_card_number(account, questions_ids, SchemeAccountCredentialAnswer):
    card_number = SchemeAccountCredentialAnswer.objects.filter(
        scheme_account_id=account.id,
        question__id__in=questions_ids.values()
    ).values('question__type', 'answer').order_by('-question__type').first()

    if not card_number:
        account.card_number = ''
        return None

    if card_number['question__type'] == CARD_NUMBER:
        account.card_number = card_number['answer']

    elif card_number['question__type'] == BARCODE and account.scheme.card_number_regex:
        try:
            regex_match = re.search(account.scheme.card_number_regex, card_number['answer'])
        except sre_constants.error:
            account.card_number = ''
            return None
        if regex_match:
            try:
                account.card_number = account.scheme.card_number_prefix + regex_match.group(1)
            except IndexError:
                pass

    else:
        account.card_number = ''


def _update_barcode(account, questions_ids, SchemeAccountCredentialAnswer):
    barcode = SchemeAccountCredentialAnswer.objects.filter(
        scheme_account_id=account.id,
        question__id__in=questions_ids.values()
    ).values('question__type', 'answer').order_by('question__type').first()

    if not barcode:
        account.barcode = ''
        return None

    if barcode['question__type'] == BARCODE:
        account.barcode = barcode['answer']
        account.save(update_fields=['barcode'])

    elif barcode['question__type'] == CARD_NUMBER and account.scheme.barcode_regex:
        try:
            regex_match = re.search(account.scheme.barcode_regex, barcode['answer'])
        except sre_constants.error:
            account.barcode = ''
            return
        if regex_match:
            try:
                account.barcode = account.scheme.barcode_prefix + regex_match.group(1)
                account.save(update_fields=['barcode'])
            except IndexError:
                pass

    else:
        account.barcode = ''


def update_barcode_and_card_number(account, SchemeCredentialQuestion, SchemeAccountCredentialAnswer):
    questions_ids = {
        question['type']: question['id']
        for question in SchemeCredentialQuestion.objects.filter(
            scheme_id=account.scheme_id,
            type__in=[CARD_NUMBER, BARCODE]).values('type', 'id')
    }

    _update_card_number(account, questions_ids, SchemeAccountCredentialAnswer)
    _update_barcode(account, questions_ids, SchemeAccountCredentialAnswer)
    account.save(update_fields=['barcode', 'card_number'])


def populate_card_number_and_barcode(apps, schema_editor):
    SchemeAccount = apps.get_model('scheme', 'SchemeAccount')
    SchemeCredentialQuestion = apps.get_model('scheme', 'SchemeCredentialQuestion')
    SchemeAccountCredentialAnswer = apps.get_model('scheme', 'SchemeAccountCredentialAnswer')

    for account in SchemeAccount.objects.filter(is_deleted=False).all():
        if not account.card_number:
            update_barcode_and_card_number(account, SchemeCredentialQuestion, SchemeAccountCredentialAnswer)


class Migration(migrations.Migration):
    dependencies = [
        ('scheme', '0073_auto_20200513_1511'),
    ]

    operations = [
        migrations.RunPython(populate_card_number_and_barcode),
    ]
