# Generated by Django 4.0.7 on 2023-01-09 14:29
import time

from django.db import migrations, models


def populate_merchant_identifier(apps, schema_editor):
    # For every scheme account, check if the first Scheme Account Entry has a linked merchant
    # identifier question answer. If so, populate the new field with that answer. This assumes
    # that all Scheme Account Entries linked to a single scheme account have the same value for
    # the merchant identifier, which should be the case.
    start = time.perf_counter()
    SchemeAccount = apps.get_model("scheme", "SchemeAccount")
    SchemeAccountEntry = apps.get_model("ubiquity", "SchemeAccountEntry")
    SchemeAccountCredentialAnswer = apps.get_model("scheme", "SchemeAccountCredentialAnswer")
    all_entries = SchemeAccountEntry.objects.all().select_related("scheme_account").prefetch_related(
        "schemeaccountcredentialanswer_set", "schemeaccountcredentialanswer_set__question"
    )

    processed_scheme_acc_ids = set()

    records_to_update = []
    for entry in all_entries:
        if entry.scheme_account_id not in processed_scheme_acc_ids:
            try:
                answers = entry.schemeaccountcredentialanswer_set.all()
                for answer in answers:
                    if answer.question.type == "merchant_identifier":
                        entry.scheme_account.merchant_identifier = answer.answer
                        records_to_update.append(entry.scheme_account)
            except SchemeAccountCredentialAnswer.DoesNotExist:
                pass

            processed_scheme_acc_ids.add(entry.scheme_account_id)

    updated = SchemeAccount.objects.bulk_update(records_to_update, ["merchant_identifier"], batch_size=100)
    print(updated)
    end = time.perf_counter()
    print(f"Time to execute: {end - start} seconds")


def reverse_populate_merchant_identifier(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('scheme', '0112_remove_schemeaccount_status_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='schemeaccount',
            name='merchant_identifier',
            field=models.CharField(blank=True, db_index=True, default='', max_length=250),
        ),
        migrations.RunPython(populate_merchant_identifier, reverse_code=reverse_populate_merchant_identifier)
    ]
