[tool.poetry]
name = "hermes"
version = "0.0.0" # handled by poetry-dynamic-versioning
description = "Bink loyalty cards, payment cards, and users API."
authors = ["Bink <backend@bink.com>"]
readme = "README.md"
repository = "https://github.com/binkhq/hermes"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
]
packages = [
    {include = "api_messaging"},
    {include = "common"},
    {include = "hermes"},
    {include = "history"},
    {include = "magic_link"},
    {include = "order"},
    {include = "payment_card"},
    {include = "periodic_corrections"},
    {include = "periodic_retry"},
    {include = "prometheus"},
    {include = "scheme"},
    {include = "scripts"},
    {include = "sso"},
    {include = "ubiquity"},
    {include = "user"},
]
include = [
    { path = "templates", format = ["sdist", "wheel"] }
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "azure"
url = "https://pkgs.dev.azure.com/binkhq/_packaging/binkhq/pypi/simple/"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.11"
django = "<5"
arrow = "^1.3.0"
django-anymail = "^10.2"
django-bulk-update = "^2.2.0"
django-colorful = "^1.3"
django-cors-headers = "^4.3.1"
django-mail-templated = "^2.6.5"
djangorestframework = "^3.14.0"
hashids = "^1.3.1"
pycryptodome = "^3.20.0"
requests = "^2.31.0"
requests-oauthlib = "^1.3.1"
django-admin-env-notice = "^1.0"
django-redis = "^5.4.0"
redis = "^5.0.1"
dictfilter = "^2.1"
influxdb = "^5.3.1"
celery = "^5.3.6"
factory-boy = "^3.3.0"
pillow = "^10.2.0"
pyjwt = "^2.8.0"
pyyaml = "^6.0.1"
sentry-sdk = "^1.40.5"
tenacity = "^8.2.3"
psycopg2-binary = "^2.9.9"
django-prometheus = "^2.3.1"
django-admin-rangefilter = "^0.12.1"
cryptography = "^42.0.4"
gunicorn = "^20.1.0"
cached-property = "^1.5.2"
paramiko = "^3.4.0"
dj-database-url = "^2.1.0"
azure-identity = "^1.15.0"
azure-keyvault-secrets = "^4.7.0"
tzdata = "^2024.1"
whitenoise = "^6.6.0"
python-decouple = "^3.8"
mozilla-django-oidc = "^4.0.0"
azure-storage-blob = "^12.19.0"
tqdm = "^4.66.2"
django-storages = {extras = ["azure"], version = "^1.14.2"}
olympus-messaging = { version = "^0.3.2", source = "azure" }
bink-logging-utils = { extras = ["gunicorn"], version = ">=1.4.0", source = "azure" }
cosmos-message-lib = { version = ">=2.0.0", source = "azure" }
shared-config-storage = { version = "^1.6.2", source = "azure" }
rusty-jeff = { version = "^0.1.7", source = "azure" }

[tool.poetry.group.dev.dependencies]
faker = "^23.2.1"
httpretty = "^1.1.4"
fakeredis = "^2.21.1"
coverage = "^7.4.2"
xenon = "^0.9.1"
pytest = "^8.0.1"
pytest-django = "^4.8.0"
ptpython = "^3.0.26"
tomli = "^2.0.1"
ruff = "^0.2.2"
ipython = "^8.21.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
vcs = "git"
enable = true

[tool.poetry-dynamic-versioning.substitution]
files = ['hermes/version.py']

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "hermes.settings"
python_files = "test_*.py"

[tool.ruff]
line-length = 120
output-format = "full"
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",    # Pyflakes (F)
    "E",
    "W",    # pycodestyle (E, W)
    "C90",  # mccabe (C90)
    "I",    # isort (I)
    # pydocstyle (D)
    "UP",   # pyupgrade (UP)
    "N",    # pep8-naming (N)
    "YTT",  # flake8-2020 (YTT)
    # "ANN",  # flake8-annotations (ANN)
    # "S",    # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "C4",   # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN",  # flake8-import-conventions (ICN)
    "T20",  # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    # "ARG",  # flake8-unused-arguments (ARG)
    # "DTZ",  # flake8-datetimez (DTZ)
    # "ERA",  # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW",  # Pylint (PLC, PLE, PLR, PLW)
    "RUF",  # Ruff-specific rules (RUF)
]

ignore = [
    "SIM108", # Not using ternary operator
    "BLE001",
    "PLR2004",
    "N818",
    "PLR0915", # Too many statements
    "PLR0913", # Too many arguments
    "RUF013", # implicit `Optional`, it's picked up also by mypy and ufortunately some of our code make use of it
    "RUF012", # ClassVar Annotation
    "UP008",  # Use `super()` instead of `super(__class__, self)`
    "PLW0603", # Using the global statement
]
exclude = [
    "**/migrations/*",
]

[tool.ruff.lint.per-file-ignores]
"hermes/fixtures/setupdb.py" = ["T201"]
"**/tests/*" = ["N801", "N802"]
