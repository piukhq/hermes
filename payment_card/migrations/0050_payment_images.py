# Generated by Django 2.2.11 on 2020-07-10 13:16

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models

from common.models import Image


def _format_image_for_ubiquity(img):
    try:
        encoding = img.encoding or img.image.name.split('.')[-1].replace('/', '')
    except (IndexError, AttributeError):
        encoding = None

    return {
        'payload': {
            'id': img.id,
            'type': img.image_type_code,
            'url': img.image.url,
            'description': img.description,
            'encoding': encoding,

        },
        'validity': {
            'start_date': img.start_date.timestamp(),
            'end_date': img.end_date.timestamp()
        }
    }


def format_base_images(apps, schema_editor):
    PaymentCard = apps.get_model('payment_card', 'PaymentCard')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO]
    }

    payment_cards = []
    for payment_card in PaymentCard.objects.all():
        formatted_images = {}
        for img in payment_card.images.filter(**query).all():
            if img.image_type_code not in formatted_images:
                formatted_images[img.image_type_code] = {}

            formatted_images[img.image_type_code][img.id] = _format_image_for_ubiquity(img)

        payment_card.formatted_images = formatted_images
        payment_cards.append(payment_card)

    PaymentCard.objects.bulk_update(payment_cards, ['formatted_images'])


def format_account_images(apps, schema_editor):
    PaymentCardAccount = apps.get_model('payment_card', 'PaymentCardAccount')
    PaymentCardAccountImage = apps.get_model('payment_card', 'PaymentCardAccountImage')
    query = {
        'status': Image.PUBLISHED,
        'image_type_code__in': [Image.HERO, Image.ICON, Image.ALT_HERO]
    }

    accounts = {}
    for img in PaymentCardAccountImage.objects.filter(**query).all():
        formatted_image = _format_image_for_ubiquity(img)
        for account in img.payment_card_accounts.all():
            if account.id in accounts:
                images_to_update = account.formatted_images.get(img.image_type_code, {})
                images_to_update[img.id] = formatted_image
                accounts[account.id].formatted_images[img.image_type_code] = images_to_update
            else:
                account.formatted_images[img.image_type_code] = {img.id: formatted_image}
                accounts[account.id] = account

    PaymentCardAccount.all_objects.bulk_update(list(accounts.values()), ['formatted_images'], batch_size=1000)


def revert_format_images(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('payment_card', '0049_auto_20200501_0929'),
    ]

    operations = [
        migrations.AlterField(
            model_name='paymentcardaccountimage',
            name='payment_card_accounts',
            field=models.ManyToManyField(blank=True, related_name='images', to='payment_card.PaymentCardAccount'),
        ),
        migrations.AddField(
            model_name='paymentcard',
            name='formatted_images',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.RunPython(format_base_images, revert_format_images),
        migrations.AddField(
            model_name='paymentcardaccount',
            name='formatted_images',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.RunPython(format_account_images, revert_format_images),
    ]
