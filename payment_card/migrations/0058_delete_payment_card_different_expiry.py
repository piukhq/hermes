# Generated by Django 4.0.5 on 2022-08-31 10:21
from collections import defaultdict

from django.apps import apps
from django.db import migrations, transaction
from django.db.models import Count

from payment_card.models import PaymentCardAccount


def loop_through_record(delete_recs, payment_scheme_entry_recs, user_links_recs):
    PaymentCardSchemeEntry = apps.get_model("ubiquity", "PaymentCardSchemeEntry")
    PaymentCardAccountEntry = apps.get_model("ubiquity", "PaymentCardAccountEntry")

    while delete_recs:
        with transaction.atomic():
            # Update by 100 records
            PaymentCardAccount.objects.bulk_update(delete_recs[:100], ["is_deleted"])
            del delete_recs[:100]

        # bulk create new links
    while payment_scheme_entry_recs:
        with transaction.atomic():
            PaymentCardSchemeEntry.objects.bulk_create(payment_scheme_entry_recs[:100], ignore_conflicts=True)
            del payment_scheme_entry_recs[:100]

    while user_links_recs:
        with transaction.atomic():
            PaymentCardAccountEntry.objects.bulk_create(user_links_recs[:100], ignore_conflicts=True)
            del user_links_recs[:100]


def fix_duplcate_cards(apps, schema_editor):
    # Do nothing - pending investigation on what to do with VOP activations on duplicate cards
    pass

    # PaymentCardSchemeEntry = apps.get_model("ubiquity", "PaymentCardSchemeEntry")
    # PaymentCardAccountEntry = apps.get_model("ubiquity", "PaymentCardAccountEntry")
    #
    # dupe_fingerprints = (
    #     PaymentCardAccount.objects.values("fingerprint")
    #     .annotate(count=Count("fingerprint"))
    #     .values("fingerprint")
    #     .order_by()
    #     .filter(count__gt=1)
    # )
    #
    # payment_accounts = (
    #     PaymentCardAccount.objects.filter(fingerprint__in=dupe_fingerprints)
    #     .prefetch_related("paymentcardschemeentry_set", "user_set")
    #     .order_by("-expiry_year", "-expiry_month")
    #     .all()
    # )
    #
    # accs_sorted_by_fingerprint = defaultdict(list)
    # for payment_account in payment_accounts:
    #     accs_sorted_by_fingerprint[payment_account.fingerprint].append(payment_account)
    #
    # accs_to_keep = defaultdict(list)
    # accs_to_delete = defaultdict(list)
    # for fingerprint, sorted_accounts in accs_sorted_by_fingerprint.items():
    #     accs_to_keep[fingerprint] = sorted_accounts[0]
    #     accs_to_delete[fingerprint].extend(sorted_accounts[1:])
    #
    # users_to_migrate = []
    # scheme_accs_to_migrate = []
    # payment_scheme_entries_to_create = []
    # user_links_to_create = []
    # for fingerprint, payment_accounts in accs_to_delete.items():
    #     for x in payment_accounts:
    #
    #         with transaction.atomic():
    #             # Get schemes to link and delete PaymentCardSchemeEntry object
    #             scheme_accs_to_migrate.extend(
    #                 x.paymentcardschemeentry_set.values_list("scheme_account_id", flat=True).all()
    #             )
    #             x.paymentcardschemeentry_set.all().delete()
    #
    #             # Get users to link and delete PaymentCardAccountEntry
    #             users_to_migrate.extend(x.user_set.values_list("id", flat=True).all())
    #             x.paymentcardaccountentry_set.all().delete()
    #
    #     # create payment scheme entry instances to bulk create later
    #     for acc in scheme_accs_to_migrate:
    #         payment_scheme_entries_to_create.append(
    #             PaymentCardSchemeEntry(scheme_account_id=acc, payment_card_account_id=accs_to_keep[fingerprint].id)
    #         )
    #
    #     for acc in users_to_migrate:
    #         user_links_to_create.append(
    #             PaymentCardAccountEntry(user_id=acc, payment_card_account_id=accs_to_keep[fingerprint].id)
    #         )
    # # bulk update the accounts to delete to set deleted flag to True
    # payment_accs_to_delete_grouped = []
    # for payment_accs_list in accs_to_delete.values():
    #     payment_accs_to_delete_grouped.extend(payment_accs_list)
    #     for acc in payment_accs_list:
    #         acc.is_deleted = True
    #
    # loop_through_record(
    #     delete_recs=payment_accs_to_delete_grouped,
    #     payment_scheme_entry_recs=payment_scheme_entries_to_create,
    #     user_links_recs=user_links_to_create,
    # )


def revert(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("payment_card", "0057_alter_paymentcard_formatted_images_and_more"),
    ]

    operations = [migrations.RunPython(fix_duplcate_cards, reverse_code=revert)]
