# Generated by Django 4.2.10 on 2024-04-18 08:54

from typing import TYPE_CHECKING
from django.db import migrations

if TYPE_CHECKING:
    from django.db.backends.postgresql.schema import DatabaseSchemaEditor
    from django.db.migrations.state import StateApps
    from django.contrib.auth.models import Group as GroupType
    from django.contrib.auth.models import Permission as PermissionType


def migrate_groups(apps: "StateApps", schema_editor: "DatabaseSchemaEditor") -> None:
    Group: "GroupType" = apps.get_model("auth", "Group")
    Permission: "PermissionType" = apps.get_model("auth", "Permission")

    # fetch existing groups
    ro = Group.objects.get(name="Read Only")
    rw = Group.objects.get(name="Read/Write")

    # 'Reader' translates to 'Read Only' + script view permissions
    ro.name = "Reader"
    ro.permissions.add(*Permission.objects.filter(codename__startswith="view", codename__contains="script").all())
    ro.save()

    # 'Contributor' translates to 'Read/Write' + 'Scripts Run and Correct'
    rw.name = "Contributor"
    rw.permissions.add(*Permission.objects.filter(codename__contains="script").all())

    # for some reason groups 'Scripts Run Only' and 'Scripts Run and Correct' are not created via migrations,
    # so they might not exist (for example when running the github ci pipeline).
    for grp in Group.objects.filter(name__in=("Scripts Run Only", "Scripts Run and Correct")).all():
        rw.user_set.add(*grp.user_set.all())
        grp.delete()

    rw.save()


def revert_migrate_groups(apps: "StateApps", schema_editor: "DatabaseSchemaEditor") -> None:
    # cannot exactly revert which user was assigned to deleted groups 'Scripts Run Only' and 'Scripts Run and Correct'
    # these will need to be manually reassigned via django Admin.

    Group: "GroupType" = apps.get_model("auth", "Group")
    Permission: "PermissionType" = apps.get_model("auth", "Permission")

    # fetch existing groups
    reader = Group.objects.get(name="Reader")
    contributor = Group.objects.get(name="Contributor")

    # fetch script permissions
    run_only_script_perms = Permission.objects.filter(codename__in=("add_scriptresult", "view_scriptresult")).all()
    all_script_perms = Permission.objects.filter(codename__contains="script").all()

    # 'Read Only' translates to 'Reader' - script view permissions
    reader.name = "Read Only"
    reader.permissions.remove(
        *Permission.objects.filter(codename__startswith="view", codename__contains="script").all()
    )
    reader.save()

    # 'Read/Write' translates to 'Contributor' - scripts permissions
    contributor.name = "Read/Write"
    contributor.permissions.remove(*all_script_perms)
    contributor.save()

    # create 'Scripts Run Only' and 'Scripts Run and Correct'
    sr = Group.objects.create(name="Scripts Run Only")
    sr.permissions.add(*run_only_script_perms)
    sr_c = Group.objects.create(name="Scripts Run and Correct")
    sr_c.permissions.add(*all_script_perms)


class Migration(migrations.Migration):
    dependencies = [
        ("user", "0058_alter_customuser_email"),
    ]

    operations = [
        migrations.RunPython(migrate_groups, revert_migrate_groups),
    ]
